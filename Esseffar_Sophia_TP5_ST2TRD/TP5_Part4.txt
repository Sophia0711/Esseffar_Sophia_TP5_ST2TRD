Functionality N#1
-----------------------------------------------------------------------------------
Create new items

We can create a function in each class (Item, Sulfuras, Backstage, AgedBrie,
Conjured) that will call a constructor with parameters. So instead of creating an
item with 'Item bread = new Item(Name, SellIn, Quality)' we just call the function
and the parameters will be entered by the user with Console.ReadLine();

Functionality N#2
-----------------------------------------------------------------------------------
Delete an item when Quality = 0

We create a function with a for loop that will look for each Item if Item.Quality
= 0 then it is removed by "Items.Remove(i)" with i the iteration from the loop.
We can launch this function every 30 days and also force the garbage collector to 
run right after in order to free memory with GC.Collect().

Functionality N#3
-----------------------------------------------------------------------------------
Add price to items

Price would depend on the quality of an item. For this purpose, we would have to 
add an attribute int Price to the Item class with getter and setter properties.
Then, a virtual function UpdatePrice() in Item class which will increase the price 
+3 for each quality point earned and decrease -3 for each quality point lost.
The begining price is set with the constructor call.
The function UpdatePrice() is overrided in each subclass.
In the NextDay() function, the UpdatePrice() function is called at first before
changing the quality or sellin attributes.
We could have just add Price+=3 in the NextDay() function but the goal here is 
scalability in order the manage the price movement as we want.